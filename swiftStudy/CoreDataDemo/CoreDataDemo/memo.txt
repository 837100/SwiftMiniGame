CoreData의 전체적인 데이터 흐름을 설명해드리겠습니다:

1. **데이터 모델 정의** (CoreDataDemo.xcdatamodeld)
- CoreData의 시작점입니다
- Product 엔티티와 그 속성들(name, quantity 등)이 정의되어 있습니다
- Xcode의 데이터 모델 에디터에서 생성/관리됩니다

2. **PersistenceController.swift**
- CoreData 스택의 초기화와 설정을 담당합니다
- `NSPersistentContainer`를 생성하고 설정합니다
- 싱글톤 패턴(`shared`)을 통해 앱 전체에서 하나의 CoreData 스택을 공유합니다

3. **CoreDataDemoApp.swift** (앱의 진입점)
```swift
@main
struct CoreDataDemoApp: App {
    let persistenceController = PersistenceController.shared
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .environment(\.managedObjectContext, persistenceController.container.viewContext)
        }
    }
}
```
- 앱이 시작될 때 `PersistenceController`를 초기화하고
- `managedObjectContext`를 환경 값으로 설정하여 전체 앱에서 사용할 수 있게 합니다

4. **ContentView.swift**
```swift
@Environment(\.managedObjectContext) private var viewContext
@FetchRequest(entity: Product.entity(), sortDescriptors: [])
private var products: FetchedResults<Product>
```
- 환경 값으로 설정된 `managedObjectContext`를 가져와서 사용합니다
- `FetchRequest`를 통해 CoreData의 데이터를 관찰하고 표시합니다

5. **ResultsView.swift**
```swift
var viewContext: NSManagedObjectContext
```
- ContentView로부터 전달받은 `viewContext`를 사용하여 데이터를 검색합니다

데이터 흐름:
1. 앱 시작 → PersistenceController 초기화
2. CoreData 스택 설정
3. viewContext를 앱 전체 환경에 주입
4. 각 뷰에서 viewContext를 통해 데이터 접근 및 조작

이러한 구조를 통해:
- 앱 전체에서 일관된 데이터 접근이 가능합니다
- 데이터 변경사항이 자동으로 UI에 반영됩니다
- 영구 저장소에 안전하게 데이터가 저장됩니다
